knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gplots)
library(limma)
num = 'res10/'
datapath = 'E:/GitHub/SNGCCA/SNGCCA/RealData/'
respath = paste0(datapath, num)
ypath = paste0(datapath,'PAM50label664.txt')
y <- read.table(ypath, header=FALSE)
colnames(y) <- "Type"
file_list = c('Exp664_genes','Meth664_probes','miRNA664_miRNA')
data_list = c('Exp','Meth','miRNA')
data_pre <- function(Labelpath, Datapath, Respath){
Exp_label <- read.table(Labelpath, sep="\t", header=FALSE)
Exp_list <- as.list(Exp_label[, 1])
Exp <- as.data.frame(t(as.matrix(read.table(Datapath))))
colnames(Exp) <- Exp_label[, 1]
ExpRes <- read.csv(Respath)
FilterRes <- ExpRes$Name
ExpFilter <- scale(Exp[, FilterRes])
ExpConcat <- cbind(ExpFilter, y)
ExpConcat <- t(as.matrix(ExpConcat[order(ExpConcat$Type),]))
return(ExpConcat)
}
library(Rtsne)
tsne_plot <- function(data, perplexity, theta, max_iter){
tsne_result <- Rtsne(t(data), dims = 2, perplexity = perplexity, theta = theta,max_iter = max_iter)
tsne_data <- as.data.frame(tsne_result$Y)
colnames(tsne_data) <- c("tSNE1", "tSNE2")
tsne_data$Type <- as.factor(y$Type[order(y$Type)])
tsne_data$Type <- factor(tsne_data$Type, levels = c(1, 2, 3, 4), labels = c("Basal", "LumA", "LumB", "Her2"))
ggplot(tsne_data, aes(x = tSNE1, y = tSNE2, color = Type)) +
geom_point( size = 2) +
#theme_minimal() +
scale_color_discrete(name = "Group") +
scale_color_manual(values = c("#FC4E07", "#E7B800","#F0E442","#00AFBB" ))+
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
}
library("gplots")
color.map <- function(type) {
if (type == 4) {
return("#00afbb")
} else if (type == 1) {
return("#fc4e08")
} else if (type == 2) {
return("#e7b800")
} else if (type == 3) {
return("#F0E442")
}
}
custom_col <- function(x, min_range, max_range) {
col_palette <- redgreen(75)
col_palette[ceiling(length(col_palette) / 2)] <- "#000000"
color_breaks <- seq(min_range, max_range, length.out = length(col_palette) + 1)
return(list(breaks = color_breaks, col = col_palette))
}
library(fields)
my_palette <- colorRampPalette(c("red", "#000000", "green"))(n = 299)
png("color_key.png", width = 400, height = 100)
image.plot(zlim = c(-3, 3),
legend.only = TRUE,
col = my_palette,
horizontal = TRUE,
legend.width = 1.5,
legend.mar = 3,
axis.args = list(
at =NULL,
labels = NULL
))
library(fields)
my_palette <- colorRampPalette(c("red", "#000000", "green"))(n = 299)
png("color_key.png", width = 400, height = 100)
image.plot(zlim = c(-3, 3),
legend.only = TRUE,
col = my_palette,
horizontal = TRUE,
legend.width = 1.5,
legend.mar = 3,
axis.args = list(
at =NULL,
labels = NULL
))
library(fields)
my_palette <- colorRampPalette(c("red", "#000000", "green"))(n = 299)
png("color_key.png", width = 400, height = 100)
image.plot(zlim = c(-3, 3),
legend.only = TRUE,
col = my_palette,
horizontal = TRUE,
legend.width = 1.5,
legend.mar = 3,
axis.args = list(
at =NULL,
labels = NULL
))
library("gplots")
color.map <- function(type) {
if (type == 4) {
return("#00afbb")
} else if (type == 1) {
return("#fc4e08")
} else if (type == 2) {
return("#e7b800")
} else if (type == 3) {
return("#F0E442")
}
}
custom_col <- function(x, min_range, max_range) {
col_palette <- redgreen(75)
col_palette[ceiling(length(col_palette) / 2)] <- "#000000"
color_breaks <- seq(min_range, max_range, length.out = length(col_palette) + 1)
return(list(breaks = color_breaks, col = col_palette))
}
#library(fields)
#my_palette <- colorRampPalette(c("red", "#000000", "green"))(n = 299)
#png("color_key.png", width = 400, height = 100)
#image.plot(zlim = c(-3, 3),
#           legend.only = TRUE,
#           col = my_palette,
#           horizontal = TRUE,
#           legend.width = 1.5,
#           legend.mar = 3,
#           axis.args = list(
#             at =NULL,
#             labels = NULL
#           ))
#dev.off()
colors <- unlist(lapply(data[[1]][length(rownames(data[[1]])),], color.map))
num = 'res10/'
datapath = 'E:/GitHub/SNGCCA/SNGCCA/RealData/'
respath = paste0(datapath, num)
ypath = paste0(datapath,'PAM50label664.txt')
y <- read.table(ypath, header=FALSE)
colnames(y) <- "Type"
file_list = c('Exp664_genes','Meth664_probes','miRNA664_miRNA')
data_list = c('Exp','Meth','miRNA')
data_pre <- function(Labelpath, Datapath, Respath){
Exp_label <- read.table(Labelpath, sep="\t", header=FALSE)
Exp_list <- as.list(Exp_label[, 1])
Exp <- as.data.frame(t(as.matrix(read.table(Datapath))))
colnames(Exp) <- Exp_label[, 1]
ExpRes <- read.csv(Respath)
FilterRes <- ExpRes$Name
ExpFilter <- scale(Exp[, FilterRes])
ExpConcat <- cbind(ExpFilter, y)
ExpConcat <- t(as.matrix(ExpConcat[order(ExpConcat$Type),]))
return(ExpConcat)
}
library(Rtsne)
tsne_plot <- function(data, perplexity, theta, max_iter){
tsne_result <- Rtsne(t(data), dims = 2, perplexity = perplexity, theta = theta,max_iter = max_iter)
tsne_data <- as.data.frame(tsne_result$Y)
colnames(tsne_data) <- c("tSNE1", "tSNE2")
tsne_data$Type <- as.factor(y$Type[order(y$Type)])
tsne_data$Type <- factor(tsne_data$Type, levels = c(1, 2, 3, 4), labels = c("Basal", "LumA", "LumB", "Her2"))
ggplot(tsne_data, aes(x = tSNE1, y = tSNE2, color = Type)) +
geom_point( size = 2) +
#theme_minimal() +
scale_color_discrete(name = "Group") +
scale_color_manual(values = c("#FC4E07", "#E7B800","#F0E442","#00AFBB" ))+
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gplots)
library(limma)
num = 'res10/'
datapath = 'E:/GitHub/SNGCCA/SNGCCA/RealData/'
respath = paste0(datapath, num)
ypath = paste0(datapath,'PAM50label664.txt')
y <- read.table(ypath, header=FALSE)
colnames(y) <- "Type"
file_list = c('Exp664_genes','Meth664_probes','miRNA664_miRNA')
data_list = c('Exp','Meth','miRNA')
data_pre <- function(Labelpath, Datapath, Respath){
Exp_label <- read.table(Labelpath, sep="\t", header=FALSE)
Exp_list <- as.list(Exp_label[, 1])
Exp <- as.data.frame(t(as.matrix(read.table(Datapath))))
colnames(Exp) <- Exp_label[, 1]
ExpRes <- read.csv(Respath)
FilterRes <- ExpRes$Name
ExpFilter <- scale(Exp[, FilterRes])
ExpConcat <- cbind(ExpFilter, y)
ExpConcat <- t(as.matrix(ExpConcat[order(ExpConcat$Type),]))
return(ExpConcat)
}
library(Rtsne)
tsne_plot <- function(data, perplexity, theta, max_iter){
tsne_result <- Rtsne(t(data), dims = 2, perplexity = perplexity, theta = theta,max_iter = max_iter)
tsne_data <- as.data.frame(tsne_result$Y)
colnames(tsne_data) <- c("tSNE1", "tSNE2")
tsne_data$Type <- as.factor(y$Type[order(y$Type)])
tsne_data$Type <- factor(tsne_data$Type, levels = c(1, 2, 3, 4), labels = c("Basal", "LumA", "LumB", "Her2"))
ggplot(tsne_data, aes(x = tSNE1, y = tSNE2, color = Type)) +
geom_point( size = 2) +
#theme_minimal() +
scale_color_discrete(name = "Group") +
scale_color_manual(values = c("#FC4E07", "#E7B800","#F0E442","#00AFBB" ))+
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
}
library("gplots")
color.map <- function(type) {
if (type == 4) {
return("#00afbb")
} else if (type == 1) {
return("#fc4e08")
} else if (type == 2) {
return("#e7b800")
} else if (type == 3) {
return("#F0E442")
}
}
custom_col <- function(x, min_range, max_range) {
col_palette <- redgreen(75)
col_palette[ceiling(length(col_palette) / 2)] <- "#000000"
color_breaks <- seq(min_range, max_range, length.out = length(col_palette) + 1)
return(list(breaks = color_breaks, col = col_palette))
}
colors <- unlist(lapply(data[[1]][length(rownames(data[[1]])),], color.map))
colors <- unlist(lapply(data[[1]][length(rownames(data[[1]])),], color.map))
data
tsne_plot(data[[1]],37,0.3,2000)
data = list()
for(i in 1:3){
Labelpath = paste0(datapath,paste0(file_list[i],'.txt'))
Datapath = paste0(datapath, paste0(strsplit(file_list[i],'_')[[1]][1],'.txt'))
Respath = paste0(respath, paste0(data_list[i],"_score.csv"))
savename = paste0(respath, paste0(data_list[i],".png"))
data[[i]] = (data_pre(Labelpath, Datapath, Respath))
}
data = list()
for(i in 1:3){
Labelpath = paste0(datapath,paste0(file_list[i],'.txt'))
Datapath = paste0(datapath, paste0(strsplit(file_list[i],'_')[[1]][1],'.txt'))
Respath = paste0(respath, paste0(data_list[i],"_score.csv"))
savename = paste0(respath, paste0(data_list[i],".png"))
data[[i]] = (data_pre(Labelpath, Datapath, Respath))
}
tsne_plot(data[[1]],37,0.3,2000)
ggsave('Exp_SNG.png',width = 8, height = 6)
tsne_plot(data[[2]],20,0.3,1000)
ggsave('Meth_SNG.png',width = 8, height = 6)
Datapath <- 'E:/GitHub/SNGCCA/SNGCCA/RealData/res8/miRNA_SNGCCA.txt'
Data[[3]] <- t(as.data.frame(t(as.matrix(read.table(Datapath,sep = ',')))))
data = list()
for(i in 1:3){
Labelpath = paste0(datapath,paste0(file_list[i],'.txt'))
Datapath = paste0(datapath, paste0(strsplit(file_list[i],'_')[[1]][1],'.txt'))
Respath = paste0(respath, paste0(data_list[i],"_score.csv"))
savename = paste0(respath, paste0(data_list[i],".png"))
data[[i]] = (data_pre(Labelpath, Datapath, Respath))
}
tsne_plot(data[[1]],37,0.3,2000)
ggsave('Exp_SNG.png',width = 8, height = 6)
tsne_plot(data[[2]],20,0.3,1000)
ggsave('Meth_SNG.png',width = 8, height = 6)
tsne_plot(data[[3]],12,0.05,4000)
ggsave('miRNA_SNG.png',width = 8, height = 6)
merge <- rbind(data[[2]],data[[3]],data[[1]])
tsne_plot(merge,19,0.3,3000)
ggsave('Merge_SNG.png',width = 8, height = 6)
library("gplots")
color.map <- function(type) {
if (type == 4) {
return("#00afbb")
} else if (type == 1) {
return("#fc4e08")
} else if (type == 2) {
return("#e7b800")
} else if (type == 3) {
return("#F0E442")
}
}
custom_col <- function(x, min_range, max_range) {
col_palette <- redgreen(75)
col_palette[ceiling(length(col_palette) / 2)] <- "#000000"
color_breaks <- seq(min_range, max_range, length.out = length(col_palette) + 1)
return(list(breaks = color_breaks, col = col_palette))
}
#library(fields)
#my_palette <- colorRampPalette(c("red", "#000000", "green"))(n = 299)
#png("color_key.png", width = 400, height = 100)
#image.plot(zlim = c(-3, 3),
#           legend.only = TRUE,
#           col = my_palette,
#           horizontal = TRUE,
#           legend.width = 1.5,
#           legend.mar = 3,
#           axis.args = list(
#             at =NULL,
#             labels = NULL
#           ))
#dev.off()
colors <- unlist(lapply(data[[1]][length(rownames(data[[1]])),], color.map))
colnames(data[[1]]) <- rep("", ncol(data[[1]]))
a = as.matrix(data[[1]][-length(rownames(data[[1]])),])
png(file = 'ExpH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=F, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-3,3,length.out = 76),cexRow=0.7)
dev.off()
colors <- unlist(lapply(data[[2]][length(rownames(data[[2]])),], color.map))
colnames(data[[2]]) <- rep("", ncol(data[[2]]))
a = as.matrix(data[[2]][-length(rownames(data[[2]])),])
png(file = 'MethH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=FALSE, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-4,4,length.out = 76),cexRow=0.7)
dev.off()
colors <- unlist(lapply(data[[3]][length(rownames(data[[3]])),], color.map))
colnames(data[[3]]) <- rep("", ncol(data[[3]]))
a = as.matrix(data[[3]][-length(rownames(data[[3]])),])
png(file = 'miRNAH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=FALSE, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-4.5,4.5,length.out = 76),cexRow=0.7)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gplots)
library(limma)
num = 'ressng/'
datapath = 'E:/GitHub/SNGCCA/SNGCCA/RealData/'
respath = paste0(datapath, num)
ypath = paste0(datapath,'PAM50label664.txt')
y <- read.table(ypath, header=FALSE)
colnames(y) <- "Type"
file_list = c('Exp664_genes','Meth664_probes','miRNA664_miRNA')
data_list = c('Exp','Meth','miRNA')
data_pre <- function(Labelpath, Datapath, Respath){
Exp_label <- read.table(Labelpath, sep="\t", header=FALSE)
Exp_list <- as.list(Exp_label[, 1])
Exp <- as.data.frame(t(as.matrix(read.table(Datapath))))
colnames(Exp) <- Exp_label[, 1]
ExpRes <- read.csv(Respath)
FilterRes <- ExpRes$Name
ExpFilter <- scale(Exp[, FilterRes])
ExpConcat <- cbind(ExpFilter, y)
ExpConcat <- t(as.matrix(ExpConcat[order(ExpConcat$Type),]))
return(ExpConcat)
}
library(Rtsne)
tsne_plot <- function(data, perplexity, theta, max_iter){
tsne_result <- Rtsne(t(data), dims = 2, perplexity = perplexity, theta = theta,max_iter = max_iter)
tsne_data <- as.data.frame(tsne_result$Y)
colnames(tsne_data) <- c("tSNE1", "tSNE2")
tsne_data$Type <- as.factor(y$Type[order(y$Type)])
tsne_data$Type <- factor(tsne_data$Type, levels = c(1, 2, 3, 4), labels = c("Basal", "LumA", "LumB", "Her2"))
ggplot(tsne_data, aes(x = tSNE1, y = tSNE2, color = Type)) +
geom_point( size = 2) +
#theme_minimal() +
scale_color_discrete(name = "Group") +
scale_color_manual(values = c("#FC4E07", "#E7B800","#F0E442","#00AFBB" ))+
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
}
library("gplots")
color.map <- function(type) {
if (type == 4) {
return("#00afbb")
} else if (type == 1) {
return("#fc4e08")
} else if (type == 2) {
return("#e7b800")
} else if (type == 3) {
return("#F0E442")
}
}
custom_col <- function(x, min_range, max_range) {
col_palette <- redgreen(75)
col_palette[ceiling(length(col_palette) / 2)] <- "#000000"
color_breaks <- seq(min_range, max_range, length.out = length(col_palette) + 1)
return(list(breaks = color_breaks, col = col_palette))
}
#library(fields)
#my_palette <- colorRampPalette(c("red", "#000000", "green"))(n = 299)
#png("color_key.png", width = 400, height = 100)
#image.plot(zlim = c(-3, 3),
#           legend.only = TRUE,
#           col = my_palette,
#           horizontal = TRUE,
#           legend.width = 1.5,
#           legend.mar = 3,
#           axis.args = list(
#             at =NULL,
#             labels = NULL
#           ))
#dev.off()
colors <- unlist(lapply(data[[1]][length(rownames(data[[1]])),], color.map))
colnames(data[[1]]) <- rep("", ncol(data[[1]]))
a = as.matrix(data[[1]][-length(rownames(data[[1]])),])
png(file = 'ExpH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=F, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-3,3,length.out = 76),cexRow=0.7)
dev.off()
colors <- unlist(lapply(data[[2]][length(rownames(data[[2]])),], color.map))
colnames(data[[2]]) <- rep("", ncol(data[[2]]))
a = as.matrix(data[[2]][-length(rownames(data[[2]])),])
png(file = 'MethH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=FALSE, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-4,4,length.out = 76),cexRow=0.7)
dev.off()
colors <- unlist(lapply(data[[3]][length(rownames(data[[3]])),], color.map))
colnames(data[[3]]) <- rep("", ncol(data[[3]]))
a = as.matrix(data[[3]][-length(rownames(data[[3]])),])
png(file = 'miRNAH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=FALSE, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-4.5,4.5,length.out = 76),cexRow=0.7)
dev.off()
data = list()
for(i in 1:3){
Labelpath = paste0(datapath,paste0(file_list[i],'.txt'))
Datapath = paste0(datapath, paste0(strsplit(file_list[i],'_')[[1]][1],'.txt'))
Respath = paste0(respath, paste0(data_list[i],"_score.csv"))
savename = paste0(respath, paste0(data_list[i],".png"))
data[[i]] = (data_pre(Labelpath, Datapath, Respath))
}
tsne_plot(data[[1]],37,0.3,2000)
ggsave('Exp_SNG.png',width = 8, height = 6)
tsne_plot(data[[2]],20,0.3,1000)
ggsave('Meth_SNG.png',width = 8, height = 6)
tsne_plot(data[[3]],20,0.1,4000)
ggsave('miRNA_SNG.png',width = 8, height = 6)
merge <- rbind(data[[2]],data[[3]],data[[1]])
tsne_plot(merge,19,0.3,3000)
ggsave('Merge_SNG.png',width = 8, height = 6)
data[[2]]
library("gplots")
color.map <- function(type) {
if (type == 4) {
return("#00afbb")
} else if (type == 1) {
return("#fc4e08")
} else if (type == 2) {
return("#e7b800")
} else if (type == 3) {
return("#F0E442")
}
}
custom_col <- function(x, min_range, max_range) {
col_palette <- redgreen(75)
col_palette[ceiling(length(col_palette) / 2)] <- "#000000"
color_breaks <- seq(min_range, max_range, length.out = length(col_palette) + 1)
return(list(breaks = color_breaks, col = col_palette))
}
#library(fields)
#my_palette <- colorRampPalette(c("red", "#000000", "green"))(n = 299)
#png("color_key.png", width = 400, height = 100)
#image.plot(zlim = c(-3, 3),
#           legend.only = TRUE,
#           col = my_palette,
#           horizontal = TRUE,
#           legend.width = 1.5,
#           legend.mar = 3,
#           axis.args = list(
#             at =NULL,
#             labels = NULL
#           ))
#dev.off()
colors <- unlist(lapply(data[[1]][length(rownames(data[[1]])),], color.map))
colnames(data[[1]]) <- rep("", ncol(data[[1]]))
a = as.matrix(data[[1]][-length(rownames(data[[1]])),])
png(file = 'ExpH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=F, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-3,3,length.out = 76),cexRow=0.7)
dev.off()
colors <- unlist(lapply(data[[2]][length(rownames(data[[2]])),], color.map))
colnames(data[[2]]) <- rep("", ncol(data[[2]]))
a = as.matrix(data[[2]][-length(rownames(data[[2]])),])
png(file = 'MethH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=FALSE, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-4,4,length.out = 76),cexRow=0.7)
dev.off()
colors <- unlist(lapply(data[[3]][length(rownames(data[[3]])),], color.map))
colnames(data[[3]]) <- rep("", ncol(data[[3]]))
a = as.matrix(data[[3]][-length(rownames(data[[3]])),])
png(file = 'miRNAH.png', width = 960, height = 960)
heatmap.2(a,col = redgreen(75), scale="row", Rowv=TRUE, srtCol=NULL, hclustfun=function(x) hclust(x, method="complete"),Colv=FALSE,ColSideColors=colors, key=FALSE, symkey=FALSE, density.info="none", trace="none",lwid = c(0.5, 4), lhei = c(0.5, 4), margins = c(5,5),breaks = seq(-4.5,4.5,length.out = 76),cexRow=0.7)
dev.off()
